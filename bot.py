import time
import schedule
from telebot import types
from datetime import datetime, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from add_event import Add_event
from static_data import session, bot, calendar, new_services
from configs import ADMIN_ID, INSTA_MESSAGE_PART, INSTA_LINK
from services import visiting_time, create_datetime,\
    DatabaseOperations, TimeOperations, ServiceOperations


admin_id = ADMIN_ID



class Admin_Services:
    """Admin user options block"""
    @staticmethod
    def admin_start(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        bot.send_message(ADMIN_ID, text=f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}")

        add_event = types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å")
        check_events = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏")
        remove_event = types.KeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å")
        check_today = types.KeyboardButton("–•—Ç–æ –≤ –º–µ–Ω–µ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
        check_tomorrow = types.KeyboardButton("–•—Ç–æ –≤ –º–µ–Ω–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")

        markup.add(add_event, check_events, remove_event, check_today, check_tomorrow)
        bot.send_message(ADMIN_ID, text="–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, Admin_Services.admin_services_tree)

    @staticmethod
    def admin_services_tree(message):
        if message.text == "–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å":
            start_create_event(message)
        elif message.text == "–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏":

            events = DatabaseOperations.get_all_events(session)[0]
            for event in events:
                date = f"{event['date'].day}.{calendar[str(event['date'].month)]} " \
                       f"{event['date'].hour}:{event['date'].minute}"

                order = f"{event['user_first_name']} " \
                        f" {date}\n {event['procedure1']} " \
                        f"{event['procedure2']}"
                bot.send_message(ADMIN_ID, order)

        elif message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å":
            Admin_Services.admin_delete(message)

        elif message.text == "–•—Ç–æ –≤ –º–µ–Ω–µ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
            pass
        elif message.text == "–•—Ç–æ –≤ –º–µ–Ω–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
            pass

    @staticmethod
    def admin_delete(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        events = DatabaseOperations.get_all_events(session)[0]
        for event in events:
            date = f"{event['date'].day}.{calendar[str(event['date'].month)]}"
            order = f"id:{event['user_id']} {event['user_first_name']} {date}\n {event['procedure1']}"
            markup.add(order)
        bot.send_message(ADMIN_ID, text="–Ø–∫–∏–π —Å–∞–º–µ –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–∏—Ç–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, DatabaseOperations.rem_selected_order)

    """End admin user options block"""


@bot.message_handler(commands=["start"])
def start(message):
    clear_services()
    user = message.from_user
    first_name = user.first_name
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    if message.from_user.id == int(ADMIN_ID):
        Admin_Services.admin_start(message)

    else:
        if DatabaseOperations.user_exist(session, message.from_user.id):
            # welcome letter if user already exist
            bot.send_message(message.from_user.id,
                             f"–†–∞–¥–∞ –∑–Ω–æ–≤—É –≤–∞—Å –±–∞—á–∏—Ç–∏, {first_name} ! üñê\n"
                             f"INSTA: {INSTA_MESSAGE_PART}{INSTA_LINK}",
                             parse_mode="markdown")

        else:
            # welcome letter if user not exist
            bot.send_message(message.from_user.id, f"–í—ñ—Ç–∞—é, {first_name} ! üñê\n"
                                                   f"–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –¥–æ {INSTA_MESSAGE_PART}{INSTA_LINK}",
                                                   parse_mode="markdown")

        """CREATING START BUTTONS"""
        check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
        check_me_time = types.KeyboardButton("–ù–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –∑–∞–ø–∏—Å")
        check_me_replace = types.KeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
        cancel_order = types.KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
        change_order =types.KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
        markup.add(check_me_in, check_me_time, check_me_replace, cancel_order, change_order)

        bot.send_message(message.from_user.id,
                         text="–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
                         reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
def start_create_event(message):
    """START OF CREATING ORDER"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    if message.from_user.id != int(ADMIN_ID):
        if order:
            order_message = f"{order.meeting_time.strftime('%d.%m.%y %H:%M')} \n" \
                            f" –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {order.procedure1} \n" \
                            f" –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏: {order.procedure2}"
            bot.send_message(message.from_user.id, order_message)
            cancel_order = types.KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
            check_me_replace = types.KeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
            change_order = types.KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
            markup.add(cancel_order, check_me_replace, change_order)
            bot.send_message(message.from_user.id,
                             text="–í–∏–±–∞—á–µ—Ç–µ –∞–ª–µ —É –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Å \n"
                                  "–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å",
                             reply_markup=markup)
        else:
            bot.register_next_step_handler(message, Add_event.wich_day)
    else:
        print("here")
        Add_event.wich_day(message)


@bot.message_handler(func=lambda message: message.text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å"
                     or message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å")
def cancel_event(message):
    if message.from_user.id == int(ADMIN_ID):
        Admin_Services.admin_delete(message)
        return
    """REMOVE ORDER IF EXISTS"""
    keyboard = InlineKeyboardMarkup()
    to_start = InlineKeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="to_mainboard")
    check_me_in = InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data="create_order")
    keyboard.add(to_start, check_me_in)

    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    if order:
        bot.send_message(message.from_user.id, f"{order.meeting_time.strftime('%d.%m.%y %H:%M')} "
                                               f"\n {order.procedure1}"
                                               f" \n {order.procedure2}")
        DatabaseOperations.remove_order_record(session, message.from_user.id)
        bot.send_message(message.from_user.id,
                         text="–í–∞—à –∑–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å'",
                         reply_markup=keyboard)
    else:
        bot.send_message(message.from_user.id,
                         text="–£ –≤–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, –ë–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏?",
                         reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
def transfer_event(message):
    """CHANGE ORDER TIME"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    if order:
        Add_event.wich_day(message, common_stream=False)
        new_meeting_time = create_datetime(visiting_time)
        """–ó–∞–ª–∏—à–∏–ª–æ—Å—å –ø—Ä–∏–¥—É–º–∞—Ç–∏ —è–∫ —ñ –∫—É–¥–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –æ—Ä–¥–µ—Ä –æ–±—å–µ–∫—Ç"""
        TimeOperations.change_order_time(order=order, meeting_time=new_meeting_time)
        bot.send_message(message.from_user.id,
                         text="–í–∞—à –∑–∞–ø–∏—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ",
                         reply_markup=types.ReplyKeyboardRemove())
    else:
        # event by user id is not exists
        check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
        markup.add(check_me_in)
        bot.send_message(message.from_user.id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É —è–∫–∏–π –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏",
                         reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() == "–Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –∑–∞–ø–∏—Å")
def recall_event(message):
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    if order:
        bot.send_message(message.from_user.id,
                         text=f"–ó–≤—ñ—Å–Ω–æ, ü§ó\n"
                              f"–í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {TimeOperations.week[order.meeting_time.strftime('%A')]} "
                              f"{order.meeting_time.strftime('%d.%m %H:%M')}")
    else:
        # event by user id is not exists
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
        markup.add(check_me_in)
        bot.send_message(message.from_user.id,
                         text="–í–∏–±–∞—á—Ç–µ –∞–ª–µ —É –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤",
                         reply_markup=markup)


def reminder():
    """"""
    today_event = TimeOperations.get_order_by_date(datetime.today())
    if today_event:
        time_difference = today_event["date"] - datetime.now()
        if timedelta(hours=1) > time_difference:
            print("–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—à–µ —á–∞—Å–∞ –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ")
        else:
            print(time_difference)


def clear_services():
    """CLEAR TEMPORARY FOLDER AFTER OR BEFORE USERGE"""
    new_services["services"].clear()
    new_services["additions"].clear()


def final_message(chat_id):
    keyboard = InlineKeyboardMarkup()
    to_start = InlineKeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="to_mainboard")
    bot_order = InlineKeyboardButton(text="—Ç–∞–∫–æ–∂ —Ö–æ—á—É –±–æ—Ç", callback_data="need_bot")
    keyboard.add(to_start, bot_order)
    bot.send_message(chat_id, text="–Ø–∫—â–æ –≤–∏ –ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å —ñ –≤–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Å–≤–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É"
                                   " –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ–≥–æ –±–æ—Ç—É –∞–±–æ —ñ–Ω—à–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É"
                                   "–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å (—Ç–∞–∫–æ–∂ —Ö–æ—á—É –±–æ—Ç)", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
def user_change_order(message):
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)

    if order:
        clear_services()
        order_info = ServiceOperations.create_order_info(order)
        DatabaseOperations.remove_order_record(session, order.user_id)
        order_message = f"  –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_info['first_name']}\n" \
                        f"{', '.join(order_info['services'])}\n" \
                        f"–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏: {', '.join(order_info['additions'])}\n" \
                        f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä:  {order_info['user_phone']}\n" \
                        f"–î–∞—Ç–∞ –ø—Ä–∏–π–æ–º—É: {TimeOperations.week[order_info['time'].strftime('%A')]}" \
                        f" {order_info['time'].strftime('%d.%m.%y %H:%M')}"
        bot.send_message(message.from_user.id,
                         text=order_message,
                         reply_markup=types.ReplyKeyboardRemove())
        order_time = order.meeting_time
        Add_event.kind_service(message, meeting_time=order_time)

    else:
        bot.send_message(message.from_user.id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, \n"
                                                    "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏")
        # event by user id is not exists
        final_message(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == "need_bot")
def bot_propose():
    pass


@bot.callback_query_handler(func=lambda call: call.data == "to_mainboard")
def check_button(call):
    bot.answer_callback_query(call.id, "–ù–∞ –≥–æ–ª–æ–≤–Ω—É")
    start(call)


@bot.callback_query_handler(func=lambda call: call.data == "create_order")
def start_create_order_handler(call):
    bot.answer_callback_query(call.id, "—Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å")

    start_create_event(call.message)


def transfer_select_time(message):
    visiting_time.clear()
    visiting_time["day"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    time_points = TimeOperations.create_visiting_time()
    for point in time_points:
        markup.add(str(point))
    bot.send_message(message.from_user.id,
                     text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –¥–∞—Ç—É {message.text} –ù–∞ —è–∫–∏–π —á–∞—Å –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç–∏?",
                     reply_markup=markup)
    bot.register_next_step_handler(message, transfer_event_set_time)


def transfer_event_set_time(message):
    visiting_time["hour"] = message.text
    new_time = create_datetime(visiting_time)
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    TimeOperations.change_order_time(order=order, meeting_time=new_time)
    bot.send_message(message.from_user.id,
                     text="–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ",
                     reply_markup=types.ReplyKeyboardRemove())


def start_bot():
    while True:
        try:
            # Start polling
            bot.polling(none_stop=True, interval=0, timeout=30)
        except Exception as e:
            print(f"An error occurred: {e}")
            print("Retrying in 3 seconds...")
            time.sleep(3)


if __name__ == "__main__":
    # reminder()
    schedule.every(1).hours.do(TimeOperations.rem_past_events)
    start_bot()
    while True:
        print("run autoremove old orders")
        schedule.run_pending()
        time.sleep(10)
