import telebot
import schedule
import time
from telebot import types
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from models import User
from configs import TOKEN, ADMIN_ID, INSTA_MESSAGE_PART, INSTA_LINK, \
    ADDITIVES_LIST, DB_USER, DB_NAME, DB_HOST, DB_PASSWORD
from services import calendar, visiting_time,\
    DatabaseOperations, TimeOperations, ServiceOperations


bot = telebot.TeleBot(TOKEN)
admin_id = ADMIN_ID

db_url = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}/{DB_NAME}"

engine = create_engine(db_url)
Session = sessionmaker(bind=engine)
session = Session()

# temporary storage of services
new_services = {"services": [],
                "additions": []}


class Admin_Services:
    """Admin user options block"""
    @staticmethod
    def admin_start(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        bot.send_message(ADMIN_ID, text=f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}")

        add_event = types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å")
        check_events = types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏")
        remove_event = types.KeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å")
        check_today = types.KeyboardButton("–•—Ç–æ –≤ –º–µ–Ω–µ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
        check_tomorrow = types.KeyboardButton("–•—Ç–æ –≤ –º–µ–Ω–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")

        markup.add(add_event, check_events, remove_event, check_today, check_tomorrow)
        bot.send_message(ADMIN_ID, text="–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, Admin_Services.admin_services_tree)

    @staticmethod
    def admin_services_tree(message):
        if message.text == "–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å":
            start_create_event(message)
        elif message.text == "–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏":

            events = DatabaseOperations.get_all_events(session)[0]
            for event in events:
                date = f"{event['date'].day}.{calendar[str(event['date'].month)]} " \
                       f"{event['date'].hour}:{event['date'].minute}"

                order = f"{event['user_first_name']} " \
                        f" {date}\n {event['procedure1']} " \
                        f"{event['procedure2']}"
                bot.send_message(ADMIN_ID, order)

        elif message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å":
            Admin_Services.admin_delete(message)

        elif message.text == "–•—Ç–æ –≤ –º–µ–Ω–µ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ":
            pass
        elif message.text == "–•—Ç–æ –≤ –º–µ–Ω–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
            pass

    @staticmethod
    def admin_delete(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        events = DatabaseOperations.get_all_events(session)[0]
        for event in events:
            date = f"{event['date'].day}.{calendar[str(event['date'].month)]}"
            order = f"id:{event['user_id']} {event['user_first_name']} {date}\n {event['procedure1']}"
            markup.add(order)
        bot.send_message(ADMIN_ID, text="–Ø–∫–∏–π —Å–∞–º–µ –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–∏—Ç–∏?", reply_markup=markup)
        bot.register_next_step_handler(message, DatabaseOperations.rem_selected_order)

    """End admin user options block"""


class Add_event:
    """Adding event methods block"""
    @staticmethod
    def wich_day(message):
        # select order day
        user_id = message.from_user.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        days_list = TimeOperations.get_free_dates()
        for day in days_list:
            markup.add(str(day))
        bot.send_message(user_id, text="–ù–∞ —è–∫–∏–π –¥–µ–Ω—å –±–∞–∂–∞—î—Ç–∞ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å?", reply_markup=markup)
        bot.register_next_step_handler(message, Add_event.select_time)

    @staticmethod
    def select_time(message):
        # select event time
        visiting_time.clear()
        visiting_time["day"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        time_points = TimeOperations.create_visiting_time()
        for point in time_points:
            markup.add(str(point))
        bot.send_message(message.from_user.id,
                         text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –¥–∞—Ç—É {message.text} –ù–∞ —è–∫–∏–π —á–∞—Å –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç–∏?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, Add_event.final)

    @staticmethod
    def kind_service(message, meeting_time=False):
        if meeting_time:
            visiting_time["hour"] = meeting_time.strftime("%H:%M")
            visiting_time["day"] = meeting_time.strftime("%d.%m.%y")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        # event by user id is not exists
        manikyr = types.KeyboardButton("–†—É—á–∫–∏ üíÖ")
        pedik = types.KeyboardButton("–ù—ñ–∂–∫–∏ üë£")
        markup.add(manikyr, pedik)
        bot.send_message(message.from_user.id,
                         text="–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É",
                         reply_markup=markup)
        if meeting_time:
            # –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–µ—Ç–∫—É –±–µ–∑ –≤–∏–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            bot.register_next_step_handler(message, Add_event.hands_or_foots_selection)
        else:
            bot.register_next_step_handler(message, Add_event.hands_or_foots_selection)


    @staticmethod
    def hands_or_foots_selection(message):
        """USER SELECTED KIND OF NAILS PROCEDURE"""
        new_services["kind_nails_procedure"] = message.text[:5]

        if message.text.lower() == "—Ä—É—á–∫–∏ üíÖ":
            Add_event.hands_services(message)
        elif message.text.lower() == "–Ω—ñ–∂–∫–∏ üë£":
            Add_event.foots_services(message)

    @staticmethod
    def hands_services(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        manik1 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π")
        manik2 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º")
        manik3 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –∑ –ø–æ–∫—Ä + —É–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è")
        manik4 = types.KeyboardButton("–ù–∞—Ä–æ—â–µ–Ω–Ω—è")
        markup.add(manik1, manik2, manik3, manik4)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
        bot.register_next_step_handler(message, Add_event.additions)

    @staticmethod
    def foots_services(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        pedik1 = types.KeyboardButton("–ü–µ–¥–∏–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π")
        pedik2 = types.KeyboardButton("–ü–µ–¥–∏–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º")
        markup.add(pedik1, pedik2)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
        bot.register_next_step_handler(message, Add_event.kind_of_foot_service)

    @staticmethod
    def kind_of_foot_service(message):
        new_services["services"].append(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        if message.text.lower() == "–ø–µ–¥–∏–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π" or message.text.lower() == "–ø–µ–¥–∏–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º":
            foots_gigiena1 = types.KeyboardButton("–¢—ñ–ª—å–∫–∏ –ø–∞–ª—å—á–∏–∫–∏")
            foots_gigiena2 = types.KeyboardButton("–ü–∞–ª—å—á–∏–∫–∏ + —Å—Ç–æ–ø–∞")
            markup.add(foots_gigiena1, foots_gigiena2)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
        bot.register_next_step_handler(message, Add_event.additions)

    @staticmethod
    def additions(message):
        new_services["services"].append(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        additions1 = types.KeyboardButton("–§—Ä–µ–Ω—á")
        additions2 = types.KeyboardButton("–°–ª–∞–π–¥–µ—Ä–∏")
        additions3 = types.KeyboardButton("–°—Ç–µ–º–ø—ñ–Ω–≥")
        additions4 = types.KeyboardButton("–§–æ–ª—å–≥–∞")
        additions5 = types.KeyboardButton("–†–æ—Å–ø–∏—Å")
        additions6 = types.KeyboardButton("–ö–∞–º—ñ–Ω—á–∏–∫–∏")
        additions7 = types.KeyboardButton("–ù–µ –ø–æ—Ç—Ä–µ–±—É—é")
        markup.add(additions1, additions2, additions3, additions4, additions5, additions6, additions7)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏", reply_markup=markup)
        if len(new_services["services"]) + len(new_services["additions"]) < 4:
            bot.register_next_step_handler(message, Add_event.second_event_request)
        else:
            bot.register_next_step_handler(message, Add_event.final)

    @staticmethod
    def second_event_request(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        new_services["additions"].append(message.text)
        if new_services["kind_nails_procedure"] == "–†—É—á–∫–∏":
            final_message1 = types.KeyboardButton("–•–æ—á—É —â–µ –ø–µ–¥–∏–∫—é—Ä")
            final_message2 = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–∏—Å")
            markup.add(final_message1, final_message2)
            bot.send_message(message.from_user.id, text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –ø–æ—Å–ª—É–≥–∏?", reply_markup=markup)
            bot.register_next_step_handler(message, Add_event.second_event)

        elif new_services["kind_nails_procedure"] == "–ù—ñ–∂–∫–∏":
            final_message1 = types.KeyboardButton("–•–æ—á—É —â–µ –º–∞–Ω—ñ–∫—é—Ä")
            final_message2 = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–∏—Å")
            markup.add(final_message1, final_message2)
            bot.send_message(message.from_user.id, text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –ø–æ—Å–ª—É–≥–∏?", reply_markup=markup)
            bot.register_next_step_handler(message, Add_event.second_event)

    @staticmethod
    def second_event(message):
        if message.text == "–•–æ—á—É —â–µ –º–∞–Ω—ñ–∫—é—Ä":
            Add_event.hands_services(message)
        elif message.text == "–•–æ—á—É —â–µ –ø–µ–¥–∏–∫—é—Ä":
            Add_event.foots_services(message)
        else:
            Add_event.wich_day(message)

    @staticmethod
    def final(message, meeting_time = False):
        """ADD EVENT TO DB IF USER ALREADY EXISTS"""
        if not meeting_time:
            visiting_time["hour"] = message.text
            print(visiting_time["day"], visiting_time["hour"])
        if message.text in ADDITIVES_LIST:
            new_services["additions"].append(message.text)
        new_services["user_first_name"] = message.from_user.first_name
        if not DatabaseOperations.user_exist(session, message.from_user.id):
            bot.send_message(message.from_user.id,
                             text="–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É",
                             reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, Add_event.get_user_phone)
        else:
            bot.reply_to(message,
                         text="________________________________",
                         reply_markup=types.ReplyKeyboardRemove())
            new_services["user_phone"] = DatabaseOperations.get_user_info(session, message.from_user.id).user_mobile
            Add_event.event_to_db(user_id=message.from_user.id, meeting_time=TimeOperations.get_visiting_datetime())


    @staticmethod
    def get_user_phone(message):
        try:
            phone = ServiceOperations.is_valid_phone(message.text)
            if phone:
                new_services["user_phone"] = phone
                """IF PHONE IS VALID ADD USER TO DATABASE"""
                user = User(user_id=message.from_user.id,
                            username=message.from_user.username,
                            first_name=message.from_user.first_name,
                            last_name=message.from_user.last_name,
                            mobile=new_services["user_phone"])
                DatabaseOperations.add_user(session, user)
                Add_event.event_to_db(user_id=message.from_user.id, meeting_time=datetime.utcnow())

            else:
                """IF PHONE IS NOT VALID TRY AGAIN"""
                bot.send_message(message.from_user.id, text="–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Äü§®, –≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑")
                bot.register_next_step_handler(message, Add_event.get_user_phone)

        except AttributeError as err:
            print("Error get phone", err)
            bot.send_message(message.from_user.id, text="–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–∏–Ω–∏–π –Ω–æ–º–µ—Äü§®, –≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å–ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, Add_event.get_user_phone)

    @staticmethod
    def event_to_db(user_id: int, meeting_time: datetime):
        order_message = f"  –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {new_services['user_first_name']}\n"\
                        f"–¥–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " \
                        f"{TimeOperations.week[meeting_time.strftime('%A')]} " \
                        f"{meeting_time.strftime('%d.%m.%y %H:%M')}\n"\
                        f"{', '.join(new_services['services'])}\n" \
                        f"–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏: {', '.join(new_services['additions'])}\n" \
                        f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä:  {new_services['user_phone']}"

        print(order_message)
        bot.send_message(admin_id, order_message)
        order = ServiceOperations.create_order(new_services=new_services, user_id=user_id, time=meeting_time)
        DatabaseOperations.add_procedure(session, order)
        bot.send_message(user_id, f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å \n"
                                  f"{order_message}")
        clear_services()
        final_message(user_id)

        """And of Adding event methods block"""


@bot.message_handler(commands=["start"])
def start(message):
    clear_services()
    user = message.from_user
    first_name = user.first_name
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    if message.from_user.id == int(ADMIN_ID):
        Admin_Services.admin_start(message)

    else:
        if DatabaseOperations.user_exist(session, message.from_user.id):
            # welcome letter if user already exist
            bot.send_message(message.from_user.id,
                             f"–†–∞–¥–∞ –∑–Ω–æ–≤—É –≤–∞—Å –±–∞—á–∏—Ç–∏, {first_name} ! üñê\n"
                             f"INSTA: {INSTA_MESSAGE_PART}{INSTA_LINK}",
                             parse_mode="markdown")

        else:
            # welcome letter if user not exist
            bot.send_message(message.from_user.id, f"–í—ñ—Ç–∞—é, {first_name} ! üñê\n"
                                                   f"–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –¥–æ {INSTA_MESSAGE_PART}{INSTA_LINK}",
                                                   parse_mode="markdown")

        """CREATING START BUTTONS"""
        check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
        check_me_time = types.KeyboardButton("–ù–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –∑–∞–ø–∏—Å")
        check_me_replace = types.KeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
        cancel_order = types.KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
        change_order =types.KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
        markup.add(check_me_in, check_me_time, check_me_replace, cancel_order, change_order)

        bot.send_message(message.from_user.id,
                         text="–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?",
                         reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
def start_create_event(message):
    """START OF CREATING ORDER"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    if message.from_user.id != int(ADMIN_ID):
        if order:
            order_message = f"{order.meeting_time.strftime('%d.%m.%y %H:%M')} \n" \
                            f" –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {order.procedure1} \n" \
                            f" –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏: {order.procedure2}"
            bot.send_message(message.from_user.id, order_message)
            cancel_order = types.KeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å")
            check_me_replace = types.KeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
            change_order = types.KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
            markup.add(cancel_order, check_me_replace, change_order)
            bot.send_message(message.from_user.id,
                             text="–í–∏–±–∞—á–µ—Ç–µ –∞–ª–µ —É –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Å \n"
                                  "–í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å",
                             reply_markup=markup)
        else:
            Add_event.kind_service(message)
    else:
        print("here")
        Add_event.kind_service(message)


@bot.message_handler(func=lambda message: message.text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å"
                     or message.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å")
def cancel_event(message):
    if message.from_user.id == int(ADMIN_ID):
        Admin_Services.admin_delete(message)
        return
    """REMOVE ORDER IF EXISTS"""
    keyboard = InlineKeyboardMarkup()
    to_start = InlineKeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="to_mainboard")
    check_me_in = InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", callback_data="create_order")
    keyboard.add(to_start, check_me_in)

    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    if order:
        bot.send_message(message.from_user.id, f"{order.meeting_time.strftime('%d.%m.%y %H:%M')} "
                                               f"\n {order.procedure1}"
                                               f" \n {order.procedure2}")
        DatabaseOperations.remove_order_record(session, message.from_user.id)
        bot.send_message(message.from_user.id,
                         text="–í–∞—à –∑–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å'",
                         reply_markup=keyboard)
    else:
        bot.send_message(message.from_user.id,
                         text="–£ –≤–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, –ë–∞–∂–∞—î—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏?",
                         reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å")
def transfer_event(message):
    """CHANGE ORDER TIME"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    if order:
        bot.send_message(message.from_user.id, text="–î–æ–±—Ä–µ, –Ω–∞ —è–∫–∏–π –¥–µ–Ω—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å?")
        new_meeting_time = datetime(2023, 9, 10, 14, 30)
        TimeOperations.change_order_time(order=order, meeting_time=new_meeting_time)
        bot.send_message(message.from_user.id,
                         text="–í–∞—à –∑–∞–ø–∏—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ",
                         reply_markup=types.ReplyKeyboardRemove())
    else:
        # event by user id is not exists
        check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
        markup.add(check_me_in)
        bot.send_message(message.from_user.id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É —è–∫–∏–π –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏",
                         reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() == "–Ω–∞–≥–∞–¥–∞—Ç–∏ –ø—Ä–æ –∑–∞–ø–∏—Å")
def recall_event(message):
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)
    if order:
        bot.send_message(message.from_user.id,
                         text=f"–ó–≤—ñ—Å–Ω–æ, ü§ó\n"
                              f"–í–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –Ω–∞ {TimeOperations.week[order.meeting_time.strftime('%A')]} "
                              f"{order.meeting_time.strftime('%d.%m %H:%M')}")
    else:
        # event by user id is not exists
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        check_me_in = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
        markup.add(check_me_in)
        bot.send_message(message.from_user.id,
                         text="–í–∏–±–∞—á—Ç–µ –∞–ª–µ —É –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤",
                         reply_markup=markup)


def reminder():
    """"""
    today_event = TimeOperations.get_order_by_date(datetime.today())
    if today_event:
        time_difference = today_event["date"] - datetime.now()
        if timedelta(hours=1) > time_difference:
            print("–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—à–µ —á–∞—Å–∞ –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ")
        else:
            print(time_difference)


def clear_services():
    """CLEAR TEMPORARY FOLDER AFTER OR BEFORE USERGE"""
    new_services["services"].clear()
    new_services["additions"].clear()


def final_message(chat_id):
    keyboard = InlineKeyboardMarkup()
    to_start = InlineKeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="to_mainboard")
    bot_order = InlineKeyboardButton(text="—Ç–∞–∫–æ–∂ —Ö–æ—á—É –±–æ—Ç", callback_data="need_bot")
    keyboard.add(to_start, bot_order)
    bot.send_message(chat_id, text="–Ø–∫—â–æ –≤–∏ –ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å —ñ –≤–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Å–≤–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É"
                                   " –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ–≥–æ –±–æ—Ç—É –∞–±–æ —ñ–Ω—à–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É"
                                   "–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å (—Ç–∞–∫–æ–∂ —Ö–æ—á—É –±–æ—Ç)", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å")
def user_change_order(message):
    order = DatabaseOperations.get_user_procedure(session, message.from_user.id)

    if order:
        clear_services()
        order_info = ServiceOperations.create_order_info(order)
        DatabaseOperations.remove_order_record(session, order.user_id)
        order_message = f"  –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_info['first_name']}\n" \
                        f"{', '.join(order_info['services'])}\n" \
                        f"–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏: {', '.join(order_info['additions'])}\n" \
                        f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä:  {order_info['user_phone']}\n" \
                        f"–î–∞—Ç–∞ –ø—Ä–∏–π–æ–º—É: {TimeOperations.week[order_info['time'].strftime('%A')]}" \
                        f" {order_info['time'].strftime('%d.%m.%y %H:%M')}"
        bot.send_message(message.from_user.id,
                         text=order_message,
                         reply_markup=types.ReplyKeyboardRemove())
        order_time = order.meeting_time
        Add_event.kind_service(message, meeting_time=order_time)

    else:
        bot.send_message(message.from_user.id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤, \n"
                                                    "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–π—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏")
        # event by user id is not exists
        final_message(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data == "need_bot")
def bot_propose():
    pass


@bot.callback_query_handler(func=lambda call: call.data == "to_mainboard")
def check_button(call):
    bot.answer_callback_query(call.id, "–ù–∞ –≥–æ–ª–æ–≤–Ω—É")
    start(call)


@bot.callback_query_handler(func=lambda call: call.data == "create_order")
def start_create_order_handler(call):
    bot.answer_callback_query(call.id, "—Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å")

    start_create_event(call.message)


def start_bot():
    while True:
        try:
            # Start polling
            bot.polling(none_stop=True, interval=0, timeout=30)
        except Exception as e:
            print(f"An error occurred: {e}")
            print("Retrying in 3 seconds...")
            time.sleep(3)


if __name__ == "__main__":
    # reminder()
    schedule.every(1).hours.do(TimeOperations.rem_past_events)
    start_bot()
    while True:
        print("run autoremove old orders")
        schedule.run_pending()
        time.sleep(10)
