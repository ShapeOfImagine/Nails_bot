import telebot

from configs import TOKEN
from telebot import types
from datetime import datetime, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from models import User
from static_data import bot, session, new_services
from bot_calendar import transfer_event_set_time, transfer_select_time
from services import TimeOperations, DatabaseOperations, ServiceOperations, visiting_time,\
    get_estimated_time

from configs import ADDITIVES_LIST, ADMIN_ID


admin_id = ADMIN_ID


class Add_event:
    """Adding event methods block"""
    @staticmethod
    def wich_day(message):
        # select order day
        user_id = message.from_user.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        days_list = TimeOperations.get_free_dates()
        for day in days_list:
            markup.add(str(day))
        bot.send_message(user_id, text="–ù–∞ —è–∫–∏–π –¥–µ–Ω—å –±–∞–∂–∞—î—Ç–∞ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å?", reply_markup=markup)

        bot.register_next_step_handler(message, Add_event.select_time)
        # else:
        #     print("false")
        #     bot.register_next_step_handler(message, transfer_select_time)

    @staticmethod
    def select_time(message, common_stream=True):
        # select event time
        visiting_time.clear()
        visiting_time["day"] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        time_points = TimeOperations.create_visiting_time()
        for point in time_points:
            markup.add(str(point))
        bot.send_message(message.from_user.id,
                         text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –¥–∞—Ç—É {message.text} –ù–∞ —è–∫–∏–π —á–∞—Å –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç–∏?",
                         reply_markup=markup)
        if common_stream:
            bot.register_next_step_handler(message, Add_event.kind_service)
        else:
            transfer_event_set_time(message)

    @staticmethod
    def kind_service(message, meeting_time=False):
        if message.text.replace(":", "").isdigit():
            visiting_time["hour"] = message.text
        if meeting_time:
            visiting_time["hour"] = meeting_time.strftime("%H:%M")
            visiting_time["day"] = meeting_time.strftime("%d.%m.%y")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        # event by user id is not exists
        manikyr = types.KeyboardButton("–†—É—á–∫–∏ üíÖ")
        pedik = types.KeyboardButton("–ù—ñ–∂–∫–∏ üë£")
        markup.add(manikyr, pedik)
        bot.send_message(message.from_user.id,
                         text="–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É",
                         reply_markup=markup)
        if meeting_time:
            # –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–µ—Ç–∫—É –±–µ–∑ –≤–∏–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            bot.register_next_step_handler(message, Add_event.hands_or_foots_selection)
        else:
            bot.register_next_step_handler(message, Add_event.hands_or_foots_selection)


    @staticmethod
    def hands_or_foots_selection(message):
        """USER SELECTED KIND OF NAILS PROCEDURE"""
        new_services["kind_nails_procedure"] = message.text[:5]

        if message.text.lower() == "—Ä—É—á–∫–∏ üíÖ":
            Add_event.hands_services(message)
        elif message.text.lower() == "–Ω—ñ–∂–∫–∏ üë£":
            Add_event.foots_services(message)

    @staticmethod
    def hands_services(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        manik1 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π")
        manik2 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º")
        manik3 = types.KeyboardButton("–ú–∞–Ω—ñ–∫—é—Ä –∑ –ø–æ–∫—Ä + —É–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è")
        manik4 = types.KeyboardButton("–ù–∞—Ä–æ—â–µ–Ω–Ω—è")
        markup.add(manik1, manik2, manik3, manik4)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
        bot.register_next_step_handler(message, Add_event.additions)

    @staticmethod
    def foots_services(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        pedik1 = types.KeyboardButton("–ü–µ–¥–∏–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π")
        pedik2 = types.KeyboardButton("–ü–µ–¥–∏–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º")
        markup.add(pedik1, pedik2)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
        bot.register_next_step_handler(message, Add_event.kind_of_foot_service)

    @staticmethod
    def kind_of_foot_service(message):
        new_services["services"].append(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        if message.text.lower() == "–ø–µ–¥–∏–∫—é—Ä –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–π" or message.text.lower() == "–ø–µ–¥–∏–∫—é—Ä –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º":
            foots_gigiena1 = types.KeyboardButton("–¢—ñ–ª—å–∫–∏ –ø–∞–ª—å—á–∏–∫–∏")
            foots_gigiena2 = types.KeyboardButton("–ü–∞–ª—å—á–∏–∫–∏ + —Å—Ç–æ–ø–∞")
            markup.add(foots_gigiena1, foots_gigiena2)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å ‚¨áÔ∏è", reply_markup=markup)
        bot.register_next_step_handler(message, Add_event.additions)

    @staticmethod
    def additions(message):
        new_services["services"].append(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        additions1 = types.KeyboardButton("–§—Ä–µ–Ω—á")
        additions2 = types.KeyboardButton("–°–ª–∞–π–¥–µ—Ä–∏")
        additions3 = types.KeyboardButton("–°—Ç–µ–º–ø—ñ–Ω–≥")
        additions4 = types.KeyboardButton("–§–æ–ª—å–≥–∞")
        additions5 = types.KeyboardButton("–†–æ—Å–ø–∏—Å")
        additions6 = types.KeyboardButton("–ö–∞–º—ñ–Ω—á–∏–∫–∏")
        additions7 = types.KeyboardButton("–ù–µ –ø–æ—Ç—Ä–µ–±—É—é")
        markup.add(additions1, additions2, additions3, additions4, additions5, additions6, additions7)
        bot.send_message(message.from_user.id, text="–û–±–µ—Ä—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏", reply_markup=markup)
        if len(new_services["services"]) + len(new_services["additions"]) < 4:
            bot.register_next_step_handler(message, Add_event.second_event_request)
        else:
            bot.register_next_step_handler(message, Add_event.wich_day)

    @staticmethod
    def second_event_request(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        new_services["additions"].append(message.text)
        if new_services["kind_nails_procedure"] == "–†—É—á–∫–∏":
            final_message1 = types.KeyboardButton("–•–æ—á—É —â–µ –ø–µ–¥–∏–∫—é—Ä")
            final_message2 = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–∏—Å")
            markup.add(final_message1, final_message2)
            bot.send_message(message.from_user.id, text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –ø–æ—Å–ª—É–≥–∏?", reply_markup=markup)
            bot.register_next_step_handler(message, Add_event.second_event)

        elif new_services["kind_nails_procedure"] == "–ù—ñ–∂–∫–∏":
            final_message1 = types.KeyboardButton("–•–æ—á—É —â–µ –º–∞–Ω—ñ–∫—é—Ä")
            final_message2 = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–∏—Å")
            markup.add(final_message1, final_message2)
            bot.send_message(message.from_user.id, text="–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –ø–æ—Å–ª—É–≥–∏?", reply_markup=markup)
            bot.register_next_step_handler(message, Add_event.second_event)

    @staticmethod
    def second_event(message):
        if message.text == "–•–æ—á—É —â–µ –º–∞–Ω—ñ–∫—é—Ä":
            Add_event.hands_services(message)
        elif message.text == "–•–æ—á—É —â–µ –ø–µ–¥–∏–∫—é—Ä":
            Add_event.foots_services(message)
        else:
            Add_event.final(message)

    @staticmethod
    def final(message, meeting_time=False):
        """ADD EVENT TO DB IF USER ALREADY EXISTS"""
        if not meeting_time:
            print(visiting_time["day"], visiting_time["hour"])
        if message.text in ADDITIVES_LIST:
            new_services["additions"].append(message.text)
        new_services["user_first_name"] = message.from_user.first_name
        if not DatabaseOperations.user_exist(session, message.from_user.id):
            bot.send_message(message.from_user.id,
                             text="–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É",
                             reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, Add_event.get_user_phone)
        else:
            bot.send_message(message.from_user.id,
                         text="________________________________",
                         reply_markup=types.ReplyKeyboardRemove())
            new_services["user_phone"] = DatabaseOperations.get_user_info(session, message.from_user.id).user_mobile
            Add_event.event_to_db(user_id=message.from_user.id, meeting_time=TimeOperations.get_visiting_datetime())


    @staticmethod
    def get_user_phone(message):
        try:
            phone = ServiceOperations.is_valid_phone(message.text)
            if phone:
                new_services["user_phone"] = phone
                """IF PHONE IS VALID ADD USER TO DATABASE"""
                user = User(user_id=message.from_user.id,
                            username=message.from_user.username,
                            first_name=message.from_user.first_name,
                            last_name=message.from_user.last_name,
                            mobile=new_services["user_phone"])
                DatabaseOperations.add_user(session, user)
                Add_event.event_to_db(user_id=message.from_user.id, meeting_time=datetime.utcnow())

            else:
                """IF PHONE IS NOT VALID TRY AGAIN"""
                bot.send_message(message.from_user.id, text="–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Äü§®, –≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑")
                bot.register_next_step_handler(message, Add_event.get_user_phone)

        except AttributeError as err:
            print("Error get phone", err)
            bot.send_message(message.from_user.id, text="–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–∏–Ω–∏–π –Ω–æ–º–µ—Äü§®, –≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å–ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, Add_event.get_user_phone)

    @staticmethod
    def event_to_db(user_id: int, meeting_time: datetime):
        time_price = get_estimated_time(new_services["services"])
        order_message = f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {new_services['user_first_name']}\n"\
                        f"–¥–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " \
                        f"{TimeOperations.week[meeting_time.strftime('%A')]} " \
                        f"{meeting_time.strftime('%d.%m.%y %H:%M')}\n"\
                        f"{', '.join(new_services['services'])}\n" \
                        f"–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ—Å–ª—É–≥–∏: {', '.join(new_services['additions'])}\n" \
                        f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä:  {new_services['user_phone']}\n" \
                        f"–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ —Ü—ñ–Ω–∞: {time_price['estim_price']}\n" \
                        f"–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {time_price['estim_time']} –≥–æ–¥–∏–Ω–∏"



        print(order_message)
        bot.send_message(admin_id, order_message)
        order = ServiceOperations.create_order(new_services=new_services, user_id=user_id, time=meeting_time)
        DatabaseOperations.add_procedure(session, order)
        bot.send_message(user_id, f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å \n"
                                  f"{order_message}")
        clear_services()
        Add_event.final_message(user_id)

    @staticmethod
    def final_message(chat_id):
        keyboard = InlineKeyboardMarkup()
        to_start = InlineKeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="to_mainboard")
        bot_order = InlineKeyboardButton(text="—Ç–∞–∫–æ–∂ —Ö–æ—á—É –±–æ—Ç", callback_data="need_bot")
        keyboard.add(to_start, bot_order)
        bot.send_message(chat_id, text="–Ø–∫—â–æ –≤–∏ –ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å —ñ –≤–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Å–≤–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É"
                                        " –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ–≥–æ –±–æ—Ç—É –∞–±–æ —ñ–Ω—à–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É"
                                        "–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å (—Ç–∞–∫–æ–∂ —Ö–æ—á—É –±–æ—Ç)", reply_markup=keyboard)

        """And of Adding event methods block"""


def clear_services():
    """CLEAR TEMPORARY FOLDER AFTER OR BEFORE USERGE"""
    new_services["services"].clear()
    new_services["additions"].clear()
